#!/usr/local/bin/bash
#
# Script Name: optim_and_batch_convert_webp
#
# Description: Converts all the files passed as input
#              to the .webp format using the cwebp
#              command line tool
#
#
# Author: Jesse Khaira
# Date: 2023-02-14
# Version: 1.0
# Usage: optim_and_batch_convert_webp [OPTIONS] [patterns...]

# By default, if no patterns are passed, all the images in the
# current directory will be translated to .webp and stored in
# the current working directory, if no output dir is specified

QUALITY=75
OUTPUT_DIR='./webp_images'
FILES_TO_CONVERT=(*)
DIR_OPTIMIZED_IMAGES='./optimized_images'
NO_STATS_IMAGEOPTIM=""

# Args below are for resizing images. We have four variables below,
# with three width variables for tablets, mobiles and desktops,
# that can be set by argument
IMG_RESOLUTION_RESIZING=false
ART_DIRECTION_RESIZING=false
declare -i WIDTH_TABLET=1300
declare -i WIDTH_MOBILE=750
declare -i WIDTH_DESKTOP=1920

help() {
    # shellformat off
    cat <<-END
		Usage: optim_and_batch_convert_webp [ -h ]
						  [ -o string ] [ -q int ]
						  [ -k string ] [ -S ]
						  [ -r ] [ -t int ] 
						  [-m int ] [-d int ]
						  [patterns...] 

		Options:

		  -h                                Output usage information

		  -S                                If set, no stats will be output by ImageOptim

		  -o string                         Output directory for webp images, defaults to ./webp_images

		  -q int                            Quality to use when converting to webp, defaults to 75

		  -k string                         Output directory for optimized images from imageoptim,
		                                    defaults to ./optimized_images. If resizing is set with 
		                                    the -r option, then images will be resized and placed in the
		                                    directory specified here, and then transformed into the .webp
		                                    format


		  -r                                If set, image resizing will be performed with a default width
		                                    for tablets of 1200 px, 615px for mobiles, and 1920px for
		                                    desktops. For all images passed as input to the command, three
		                                    images will be output for each automatically, with one for tablets,
		                                    one for mobiles, and one for desktops. Only one of -r or -a should
		                                    be specified. 

		  -a                                Created for the art direction case where the user has manually modified
		                                    an image for use with mobiles, tablets, and desktops. You must specify
		                                    which image is meant for mobiles, tablets, and desktops by specifying
		                                    '-mobile', '-tablet', or '-desktop' at the end of the file name of the
		                                    image. Similar to image resizing with the -r option, images will be
		                                    resized to a width of 1200px, 615px, and 1920 px for tablets, mobiles,
		                                    and desktops respectively, which can be changed with the options
		                                    provided. Only one of -r or -a should be specified. 


		  -t int                            If resizing is set, this is the width that tablet images will be
		                                    resized to in pixels. Defaults to 1200px. If more then one image is passed
		                                    to the command, then the resizing will target images with a filename
		                                    that include "-tablet" at the end of the name. If none are detected,
		                                    then resizing will not occur. 


		  -m int                            If resizing is set, this is the width that mobile images will be
		                                    resized to in pixels. Defaults to 615px. If more then one image is passed
		                                    to the command, then the resizing will target images with a filename
		                                    that include "-mobile" at the end of the name. If none are detected,
		                                    then resizing will not occur. 


		  -d int                            If resizing is set, this is the width that desktop images will be
		                                    resized to in pixels. Defaults to 1920px. If more then one image is passed
		                                    to the command, then the resizing will target images with a filename
		                                    that include "-desktop" at the end of the name. If none are detected,
		                                    then resizing will not occur. 

	END
    #shellformat on
}

optim_and_batch_process_webp() {
    declare -a filtered_file_list
    filter_list_images filtered_file_list "$@"

    if [[ ! -d "${DIR_OPTIMIZED_IMAGES}" ]]; then
        mkdir "${DIR_OPTIMIZED_IMAGES}"
    fi

    declare -a files_to_convert_to_webp=("${filtered_file_list[@]}")
    if "${IMG_RESOLUTION_RESIZING}"; then
        declare -a resized_image_filelist
        image_resolution_resizing resized_image_filelist "${filtered_file_list[@]}"
        files_to_convert_to_webp=("${resized_image_filelist[@]}")
    elif "${ART_DIRECTION_RESIZING}"; then
        declare -a resized_image_filelist
        art_direction_resizing resized_image_filelist "${filtered_file_list[@]}"
        files_to_convert_to_webp=("${resized_image_filelist[@]}")
    else
        # if you are resizing images, then you don't have to make explicit
        # copies of them before using imageoptim to compress them - as the
        # ImageMagick will deal with that by itself
        copy_files_without_path "${filtered_file_list[@]}"
    fi

    optimize_files

    for file in "${files_to_convert_to_webp[@]}"; do
        process_to_webp_logic "${file}"
    done
}

copy_files_without_path() {
    for file in "$@"; do
        file_name_without_path="${file##*/}"
        cp "${file}" "${DIR_OPTIMIZED_IMAGES}/${file_name_without_path}"
    done
}

optimize_files() {
    imageoptim "${NO_STATS_IMAGEOPTIM}" "${DIR_OPTIMIZED_IMAGES}/*"
}

# image resizing case -- will assume if this option is specified,
# for every image passed as input, three images will be created as
# output to reflect optimal image sized for mobile, tablets, and desktops
image_resolution_resizing() {
    # going to have to have a name reference to store the list of new files
    # that are going to be created
    declare -n new_file_list=$1
    new_file_list=()
    shift 1
    sizes=("${WIDTH_DESKTOP}" "${WIDTH_MOBILE}" "${WIDTH_TABLET}")
    names=("-desktop" "-mobile" "-tablet")
    for file in "$@"; do
        for i in "${!sizes[@]}"; do
            file_name_without_path="${file##*/}"
            base_file_name="${file_name_without_path%.*}"
            extension="${file_name_without_path##*.}"

            new_file_name="${DIR_OPTIMIZED_IMAGES}/${base_file_name}${names[i]}.${extension}"
            convert -geometry "${sizes[i]}x" "${file}" \
                "${new_file_name}"
            new_file_list+=("${new_file_name}")
        done
    done
}

# assume the user is obtaining responsive images for the art direction case,
# in which they have manually decided and cropped a part of the image
# for use on mobiles, tablets, and desktops and now want to resize the images
# requires the user to manually specify which cropped image is meant for
# mobiles, which for tablets, which for desktops
art_direction_resizing() {
    # going to have to have a name reference to store the list of new files
    # that are going to be created
    declare -n new_file_list=$1
    new_file_list=()
    shift 1
    sizes=("${WIDTH_DESKTOP}" "${WIDTH_MOBILE}" "${WIDTH_TABLET}")
    names=("-desktop" "-mobile" "-tablet")
    for file in "$@"; do
        # if the file name has -mobile, or tablet, or desktop somewhere within
        # it, we will not need to add -mobile or -desktop or -tablet within the
        # name -- so the new file name is just the path to the directory for
        # optimized images + the file name without path
        file_name_without_path="${file##*/}"
        new_file_name="${DIR_OPTIMIZED_IMAGES}/${file_name_without_path}"

        case "${file_name_without_path}" in
        *-mobile.*)
            convert -geometry "${WIDTH_MOBILE}x" "${file}" \
                "${new_file_name}"

            new_file_list+=("${new_file_name}")
            ;;

        *-tablet.*)
            convert -geometry "${WIDTH_TABLET}x" "${file}" \
                "${new_file_name}"
            new_file_list+=("${new_file_name}")
            ;;

        *-desktop.*)
            convert -geometry "${WIDTH_DESKTOP}x" "${file}" \
                "${new_file_name}"
            new_file_list+=("${new_file_name}")
            ;;

        *)
            new_file_list+=("${new_file_name}")
            cp "${file}" "${new_file_name}"
            echo "${file} has not been detected to be for mobiles, tablets, or desktops \
and thus will not be resized. It will be optimized and converted to .webp though"
            echo -e "\n"
            ;;
        esac
    done
}

filter_list_images() {
    declare -n output="$1"
    output=()
    for file in "$@"; do
        if [[ "${file}" =~ \.(jpeg|jpg|png|webp|tiff|tif)$ ]]; then
            output+=("${file}")
        fi
    done
}

process_to_webp_logic() {
    if [[ ! -d "${OUTPUT_DIR}" ]]; then
        mkdir "${OUTPUT_DIR}"
    fi

    file="$1"
    file_name_without_path="${file##*/}"
    optimized_file_location="${DIR_OPTIMIZED_IMAGES}/${file_name_without_path}"
    base_file_name="${file_name_without_path%.*}"
    cwebp -q "${QUALITY}" \
        "${optimized_file_location}" -o "${OUTPUT_DIR}/${base_file_name}.webp"
    echo -e "\n"
}

if [[ $1 == "help" ]]; then
    help
    exit 1
fi

while getopts ":hSo:q:k:rat:m:d:" optarg "$@"; do
    case $optarg in
    :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;

    \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;

    h)
        help
        exit 0
        ;;

    m)
        if eval verify_size "${OPTARG}" 0 2200; then
            WIDTH_MOBILE=$OPTARG
        else
            echo "Mobile size must be an integer between 0 and 2200px" >&2
            exit 1
        fi
        ;;

    t)
        if eval verify_size "${OPTARG}" 0 2200; then
            WIDTH_TABLET=$OPTARG
        else
            echo "Tablet size must be an integer between 0 and 2200px" >&2
            exit 1
        fi
        ;;

    d)
        if eval verify_size "${OPTARG}" 0 2200; then
            WIDTH_DESKTOP=$OPTARG
        else
            echo "Desktop size must be an integer between 0 and 2200px" >&2
            exit 1
        fi
        ;;

    r)
        if "${ART_DIRECTION_RESIZING}"; then
            echo "Can't perform both art direction and image resizing" >&2
            exit 1
        else
            IMG_RESOLUTION_RESIZING=true
        fi
        ;;

    a)
        if "${IMG_RESOLUTION_RESIZING}"; then
            echo "Can't perform both art direction and image resizing" >&2
            exit 1
        else
            ART_DIRECTION_RESIZING=true
        fi
        ;;

    o)
        OUTPUT_DIR=$OPTARG
        ;;

    k)
        DIR_OPTIMIZED_IMAGES=$OPTARG
        ;;

    S)
        NO_STATS_IMAGEOPTIM="-S"
        ;;

    q)
        if eval verify_size "${OPTARG}" 0 100; then
            QUALITY=$OPTARG
        else
            echo "Quality must be an integer between 0 and 100" >&2
            exit 1
        fi
        ;;
    esac
done

shift $((OPTIND - 1))
echo "quality: ${QUALITY}, output_webp: ${OUTPUT_DIR}, output_optim: ${DIR_OPTIMIZED_IMAGES}, \
img resolution: ${IMG_RESOLUTION_RESIZING}, tablet width: ${WIDTH_TABLET}px, \
art direction: ${ART_DIRECTION_RESIZING} mobile width: ${WIDTH_MOBILE}px \ 
desktop width: ${WIDTH_DESKTOP}px"

if (($# == 0)); then
    optim_and_batch_process_webp "${FILES_TO_CONVERT[@]}"
else
    optim_and_batch_process_webp "$@"
fi
