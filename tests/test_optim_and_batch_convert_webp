load 'test_helper/common-setup'
_common_setup

mock_list_files=(file1.jpeg file2.jpeg random_file \
    file.html file1.js file3.png file4.tiff file5.jpg note.docx xd.pdf
    xd1.pdf someother.pdf file9.webp file10.nm ll.pdf ll.xslx "some jpeg file.jpeg" \
    "some png file.png" "some xlsx file.xlsx" "random py file.py")


# bats test_tags=failure
@test "testing upper boundaries for quality failure" {
    run optim_and_batch_convert_webp -q 1000
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure

    run optim_and_batch_convert_webp -q 101
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure

    run optim_and_batch_convert_webp -q 100000
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure

    run optim_and_batch_convert_webp -q 100.5
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure
}

# bats test_tags=failure
@test "testing lower boundaries for quality failure" {
    run optim_and_batch_convert_webp -q 0.1
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure

    run optim_and_batch_convert_webp -q -10
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure

    run optim_and_batch_convert_webp -q -1
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure

    run optim_and_batch_convert_webp -q -1000
    assert_output -p "Quality must be an integer between 0 and 100"
    assert_failure
}

# bats test_tags=failure
@test "testing setting size for mobile images failure" {
    run optim_and_batch_convert_webp -m 2300
    assert_output -p "Mobile size must be an integer between 0 and 2200px"
    assert_failure
  
    run optim_and_batch_convert_webp -m -10
    assert_output -p "Mobile size must be an integer between 0 and 2200px"
    assert_failure

    run optim_and_batch_convert_webp -m 123.97
    assert_output -p "Mobile size must be an integer between 0 and 2200px"
    assert_failure

    run optim_and_batch_convert_webp -m 2201
    assert_output -p "Mobile size must be an integer between 0 and 2200px"
    assert_failure
  
    run optim_and_batch_convert_webp -m -1
    assert_output -p "Mobile size must be an integer between 0 and 2200px"
    assert_failure
}

# bats test_tags=failure
@test "testing setting size for tablet images failure" {
    run optim_and_batch_convert_webp -t 2300
    assert_output -p "Tablet size must be an integer between 0 and 2200px"
    assert_failure
  
    run optim_and_batch_convert_webp -t -1000
    assert_output -p "Tablet size must be an integer between 0 and 2200px"
    assert_failure

    run optim_and_batch_convert_webp -t 123.97
    assert_output -p "Tablet size must be an integer between 0 and 2200px"
    assert_failure

    run optim_and_batch_convert_webp -t 2201
    assert_output -p "Tablet size must be an integer between 0 and 2200px"
    assert_failure
  
    run optim_and_batch_convert_webp -t -1
    assert_output -p "Tablet size must be an integer between 0 and 2200px"
    assert_failure
}

# bats test_tags=failure
@test "testing setting size for desktop images failure" {
    run optim_and_batch_convert_webp -d 2301
    assert_output -p "Desktop size must be an integer between 0 and 2200px"
    assert_failure
  
    run optim_and_batch_convert_webp -d -0.0001
    assert_output -p "Desktop size must be an integer between 0 and 2200px"
    assert_failure

    run optim_and_batch_convert_webp -d 942.123
    assert_output -p "Desktop size must be an integer between 0 and 2200px"
    assert_failure

    run optim_and_batch_convert_webp -d 2201
    assert_output -p "Desktop size must be an integer between 0 and 2200px"
    assert_failure
  
    run optim_and_batch_convert_webp -d -1
    assert_output -p "Desktop size must be an integer between 0 and 2200px"
    assert_failure
}

# bats test_tags=success
@test "testing success case 1 -- no image resizing, or art direction" {
    declare -A mapping
    mock_commands mapping cwebp mkdir imageoptim convert cp

    run optim_and_batch_convert_webp file1.jpeg
    assert_success
    assert_equal "$(mock_get_call_num "${mapping[mkdir]}")"  2
    assert_equal "$(mock_get_call_num "${mapping[imageoptim]}")"  1
    assert_equal "$(mock_get_call_args "${mapping[imageoptim]}")" \
        " ./optimized_images/*"
    assert_equal "$(mock_get_call_num "${mapping[cwebp]}")"  1
    assert_equal "$(mock_get_call_args "${mapping[cwebp]}")" \
        "-q 75 ./optimized_images/file1.jpeg -o ./webp_images/file1.webp"
    assert_equal "$(mock_get_call_num "${mapping[convert]}")"  0

    unmock_commands cwebp cp imageoptim convert
}

# bats test_tags=success
@test "testing success case 2 -- no image resizing, or art direction" {
    declare -A mapping
    mock_commands mapping cwebp mkdir imageoptim convert cp

    # should glob and expand to all files in the current directory 
    # when run with no arguments 
    run optim_and_batch_convert_webp 
    assert_success
    assert_equal "$(mock_get_call_num "${mapping[mkdir]}")"  1
    assert_equal "$(mock_get_call_num "${mapping[imageoptim]}")"  1
    assert_equal "$(mock_get_call_args "${mapping[imageoptim]}")" \
        " ./optimized_images/*"
    assert_equal "$(mock_get_call_num "${mapping[cwebp]}")"  0
    assert_equal "$(mock_get_call_num "${mapping[cp]}")"  0
    assert_equal "$(mock_get_call_num "${mapping[convert]}")"  0

    unmock_commands cwebp cp imageoptim convert

}

# bats test_tags=success
@test "testing success case 3 -- no image resizing, or art direction" {
    declare -A mapping
    mock_commands mapping cwebp mkdir imageoptim convert cp

    # mocking a glob expanding to everything in current dir
    run optim_and_batch_convert_webp -o some_output_dir -k some_opt_dir "${mock_list_files[@]}"
    # since we are mocking mkdir, everytime we do a conditional check to see if the
    # optimized directory is created, it will fail, resulting in the mkdir being called
    # again -- which is expected behaviour as we don't actually want the directory to
    # be made in the test
    assert_success
    assert_equal "$(mock_get_call_num "${mapping[mkdir]}")"  9
    assert_equal "$(mock_get_call_args "${mapping[mkdir]}" 1)" "some_opt_dir"
    assert_equal "$(mock_get_call_args "${mapping[mkdir]}" 2)" "some_output_dir"
    assert_equal "$(mock_get_call_args "${mapping[mkdir]}" 9)" "some_output_dir"
    
    assert_equal "$(mock_get_call_num "${mapping[imageoptim]}")"  1
    assert_equal "$(mock_get_call_args "${mapping[imageoptim]}")" \
        " some_opt_dir/*"

    assert_equal "$(mock_get_call_num "${mapping[cwebp]}")"  8
    assert_equal "$(mock_get_call_args "${mapping[cwebp]}" 1)" \
		"-q 75 some_opt_dir/file1.jpeg -o some_output_dir/file1.webp"
    assert_equal "$(mock_get_call_args "${mapping[cwebp]}" 2)" \
		"-q 75 some_opt_dir/file2.jpeg -o some_output_dir/file2.webp"
    assert_equal "$(mock_get_call_args "${mapping[cwebp]}" 7)" \
		"-q 75 some_opt_dir/some jpeg file.jpeg -o some_output_dir/some jpeg file.webp"
    assert_equal "$(mock_get_call_args "${mapping[cwebp]}" 8)" \
		"-q 75 some_opt_dir/some png file.png -o some_output_dir/some png file.webp"

    assert_equal "$(mock_get_call_num "${mapping[cp]}")" 8

    assert_equal "$(mock_get_call_num "${mapping[convert]}")"  0

    # unmock_commands cwebp cp imageoptim convert

}
